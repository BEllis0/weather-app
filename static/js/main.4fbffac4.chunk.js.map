{"version":3,"sources":["components/weather.component.jsx","components/SearchBar.jsx","components/pre-search.jsx","components/savedWeather.jsx","App.js","serviceWorker.js","index.js"],"names":["Weather","props","className","city","country","currentDate","id","src","icon","unit","Math","round","currentTemp","weather","onClick","displaySaved","sunrise","minTemp","sunset","maxTemp","humidity","wind","clouds","SearchBar","geolocate","type","placeholder","value","userInputCity","onChange","handleCityChange","maxLength","userInputCountry","handleCountryChange","getWeather","metricToggle","PreSearch","SavedWeather","name","useSaved","removeSaved","apiBase","apiKey","App","setState","state","savedCities","length","key","previousState","$","css","hover","html","addClass","removeClass","Date","getDay","convertDate","sunriseDate","sunriseHours","getHours","sunriseMinutes","getMinutes","sunsetDate","sunsetHours","sunsetMinutes","a","fetch","then","res","json","console","log","sys","weatherDescription","main","temp","temp_max","temp_min","speed","all","catch","err","undefined","bind","dispaySaved","filteredCities","this","filter","place","previous","current","event","target","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","long","longitude","map","index","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4fbffac4.chunk.js","sourcesContent":["import React from 'react';\n\nconst Weather = (props) => {\n\n    return (\n        <div className=\"container\">\n            <div className=\"cards card-left\">\n                <h1>{props.city}, {props.country}</h1>\n                <h4>{props.currentDate()}</h4>\n                <h5 className=\"card-padding\">\n                    <img id=\"weatherImg\" src={props.icon} />\n                </h5>\n\n                {props.unit === \"metric\" && \n                <h1 className=\"card-padding\">{Math.round(props.currentTemp)}&deg;C</h1>\n                }\n\n                {props.unit === \"imperial\" && \n                <h1 className=\"card-padding\">{Math.round(props.currentTemp)}&deg;F</h1>\n                }\n\n                <h4 className=\"card-padding\">{props.weather}</h4>\n\n\n                <button className=\"btn save-location-btn\" onClick={props.displaySaved}><span className=\"plus-btn\">+</span> Save location</button>\n            </div>\n            \n            <div className=\"cards card-flex card-right\">\n                <div className=\"block\">\n                    <div className=\"inline\">\n                    <div className=\"card-col\">\n                    \n                        <p>SUNRISE</p>\n                        <h3>{props.sunrise}</h3>\n\n                        <p>LOW</p>\n                        {props.unit === \"metric\" &&\n                        <h3>{Math.round(props.minTemp)}&deg;C</h3>\n                        }\n                        {props.unit === \"imperial\" &&\n                        <h3>{Math.round(props.minTemp)}&deg;F</h3>\n                        }\n                        <div className=\"card-bottom\">\n                            <p>HUMIDITY</p>\n                            <p>WIND SPEED</p>\n                            <p>CLOUD COVERAGE</p>\n                        </div>\n                    </div>\n\n                <div className=\"card-col\">\n                    <p>SUNSET</p>\n                    <h3>{props.sunset}</h3>\n\n                    <p>HIGH</p>\n                    {props.unit === \"metric\" &&\n                    <h3>{Math.round(props.maxTemp)}&deg;C</h3>\n                    }\n\n                    {props.unit === \"imperial\" &&\n                    <h3>{Math.round(props.maxTemp)}&deg;C</h3>\n                    }\n                    <div className=\"card-bottom\">\n                        <h3>{props.humidity}%</h3>\n                        <h3>{props.wind}</h3>\n                        <h3>{props.clouds}%</h3>\n                    </div>\n                </div>\n                </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Weather;","import React from 'react';\n\nconst SearchBar = (props) => {\n\n    return (\n    <div>\n        <div className=\"header\">\n            <h1 id=\"Title\">Weather App</h1>\n            <button id=\"getLocalBtn\" onClick={props.geolocate}>Get Local Weather</button>\n        </div>\n        \n        <header id=\"search-bar\" >\n            <div id=\"top-bar\">\n                <div className=\"span\">\n                    <form id=\"input-form\" >\n                        <input id=\"city\" type=\"text\" placeholder=\"City\" value={props.userInputCity} onChange={props.handleCityChange} />\n                        <input id=\"country\" type=\"text\" placeholder=\"Country\" maxLength=\"2\" value={props.userInputCountry} onChange={props.handleCountryChange} />\n                    </form>\n                    <button id=\"getWeatherBtn\" onClick={props.getWeather}>Get Weather</button>\n                </div>\n                <div className=\"span\">\n                    <button id=\"metricToggle\" onClick={props.metricToggle}>&deg;F / &deg;C</button>\n                </div>\n            </div>\n        </header>\n    </div>  \n    );\n};\n\nexport default SearchBar;","import React from 'react';\n\nconst PreSearch = () => {\n    return (\n        <div className=\"pre-search\">\n              <h4>Find weather information by using the search bar above, or click on 'get local weather' to see the weather in your area. <br /><br />Weather information will be shown here.</h4>\n            </div>\n    )\n}\n\nexport default PreSearch;","import React from 'react';\n\nconst SavedWeather = (props) => {\n\n    if (props.name !== \"\") {\n    \n    return (\n        <div className=\"savedWeatherList\">\n            <p className=\"savedItem\" onClick={() => props.useSaved(props.name, props.country)} >{props.name}, {props.country}</p>\n            <div className=\"remove-saved-btn\" onClick={() => props.removeSaved(props.name, props.country)}></div>\n        </div>\n    )\n\n    }\n}\n\nexport default SavedWeather;","import React from 'react';\n// import '/Users/brandonellis/Documents/Code Projects/weather-app/weather-app/src/App.css';\nimport '/Users/brandonellis/Documents/Code Projects/weather-app/weather-app/src/App.css'\nimport Weather from \"/Users/brandonellis/Documents/Code Projects/weather-app/weather-app/src/components/weather.component.jsx\";\nimport SearchBar from \"/Users/brandonellis/Documents/Code Projects/weather-app/weather-app/src/components/SearchBar.jsx\";\nimport PreSearch from \"/Users/brandonellis/Documents/Code Projects/weather-app/weather-app/src/components/pre-search.jsx\";\nimport SavedWeather from \"/Users/brandonellis/Documents/Code Projects/weather-app/weather-app/src/components/savedWeather.jsx\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport $ from 'jquery';\n\nconst apiBase = \"https://api.openweathermap.org/data/2.5/weather?\";\nconst apiKey = \"32710cb36385401192dab72b89409cea\";\n\nclass App extends React.Component {\n  \n  constructor() {\n    super();\n    this.state = {\n      unit: \"metric\", // default units is metric. If button is pushed, changes value to 'imperial'\n      userInputCity: \"\",\n      city: undefined,\n      userInputCountry: \"\",\n      country: undefined,\n      weatherDescription: \"\",\n      currentTemp: undefined,\n      maxTemp: undefined,\n      minTemp: undefined,\n      humidity: undefined,\n      wind: undefined,\n      clouds: undefined,\n      sunrise: undefined,\n      sunset: undefined,\n      icon: \"\",\n      savedCities: [\n        // structure: {key: 1-, name: \"\", country: \"\"} add weather?\n      ],\n      displaySaved: false\n    };\n\n    this.metricToggle = this.metricToggle.bind(this);\n    this.geolocate = this.geolocate.bind(this);\n    this.dispaySaved = this.displaySaved.bind(this);\n    this.useSaved = this.useSaved.bind(this);\n    this.removeSaved = this.removeSaved.bind(this);\n    this.handleCityChange = this.handleCityChange.bind(this);\n    this.handleCountryChange = this.handleCountryChange.bind(this);\n  }\n\n  removeSaved(name, country) {\n    let filteredCities = this.state.savedCities.filter(place =>\n      place.name !== name\n    );\n\n    this.setState({\n      savedCities: filteredCities\n    })\n\n    if (this.state.savedCities.length === 1) {\n      $('.container').css('margin-top', '100px');\n    }\n  }\n\n  // changes from false to true, which changes the design display\n  displaySaved = () => {\n\n    this.setState({\n      displaySaved: true\n    })\n\n    //handles the max number of saved entries, duplicates, and updates savedCities array\n    \n    //sets the first saved city object\n    if (this.state.savedCities.length === 0) {\n      this.setState({\n        savedCities: [{key: 1, name: this.state.city, country: this.state.country}]\n      })\n    }\n\n    if (this.state.savedCities.length >= 1 && this.state.savedCities.length <= 5) { // handles max entries\n      if (this.state.savedCities[this.state.savedCities.length-1].name !== this.state.city) { // handles duplicates\n        this.setState((previousState) => ({\n          savedCities: [...previousState.savedCities, {key: this.state.savedCities[this.state.savedCities.length-1].key + 1, name: this.state.city, country: this.state.country}]\n        }));\n      }\n    };\n\n    // create jquery file and move this ----\n\n    $(function() {\n\n      $('.container').css(\"margin-top\", \"16px\");\n\n      $('.savedWeatherList').hover(function() {\n        $('.remove-saved-btn').html('-');\n        $('.remove-saved-btn').addClass(\"removeOnHover\")\n      }, function() {\n        $('.remove-saved-btn').html('').removeClass(\"removeOnHover\");\n      })\n    })\n  };\n\n  currentDate = () => {\n    let daysArr = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"FRIDAY\", \"Saturday\", \"Sunday\"];\n    let day = daysArr[new Date().getDay()-1];\n    return day;\n  }\n\n  convertDate = () => {\n\n      let sunriseDate = new Date(this.state.sunrise * 1000)\n      let sunriseHours = sunriseDate.getHours();\n      let sunriseMinutes = sunriseDate.getMinutes()\n\n      let sunsetDate = new Date(this.state.sunset * 1000)\n      let sunsetHours = sunsetDate.getHours();\n      let sunsetMinutes = sunsetDate.getMinutes()\n      \n      this.setState({\n         sunrise: `${sunriseHours}:${sunriseMinutes}`,\n         sunset: `${sunsetHours}:${sunsetMinutes}`\n      })  \n  }\n\n  useSaved(name, country) {\n\n    console.log(name, country);\n    \n    this.setState((previous, current) => {\n      return {\n        userInputCity: name,\n        userInputCountry: country\n      }\n    }, () => this.getWeather());\n  }\n\n  handleCityChange(event) {\n    this.setState({\n      userInputCity: event.target.value\n    })\n  };\n\n  handleCountryChange(event) {\n    this.setState({\n      userInputCountry: event.target.value\n    })\n  };\n\n  metricToggle() {\n    this.setState(state => {\n      if (state.unit === \"metric\") {\n        return {unit: \"imperial\"}\n      }\n      else if (state.unit === \"imperial\") {\n        return { unit: \"metric\" };\n      }\n    }, () => this.getWeather());\n  };\n\n  getWeather = async () =>  {\n    const apiCall = fetch(`${apiBase}q=${this.state.userInputCity},${this.state.userInputCountry}&units=${this.state.unit}&appid=${apiKey}`)\n    .then(res => res.json())\n    .then(res => {\n      console.log(res);\n      let city = res.name;\n      let country = res.sys.country;\n      let weatherDescription = res.weather[0].main;\n      let currentTemp = res.main.temp;\n      let maxTemp = res.main.temp_max;\n      let minTemp = res.main.temp_min;\n      let icon = res.weather[0].icon;\n      let humidity = res.main.humidity; //percentage\n      let wind = res.wind.speed;\n      let clouds = res.clouds.all; //percentage\n      let sunrise = res.sys.sunrise;\n      let sunset = res.sys.sunset;\n\n      this.setState({\n        city: city,\n        country: country,\n        weatherDescription: weatherDescription,\n        currentTemp: currentTemp,\n        maxTemp: maxTemp,\n        minTemp: minTemp,\n        humidity: humidity,\n        wind: wind,\n        clouds: clouds,\n        sunrise: sunrise,\n        sunset: sunset,\n        icon: `http://openweathermap.org/img/wn/${icon}@2x.png`\n      }, () => this.convertDate());\n    })\n    .catch(err => console.log(err));\n\n    \n\n  };\n\n  geolocate() {\n    navigator.geolocation.getCurrentPosition(position => {\n      let lat = position.coords.latitude;\n      let long = position.coords.longitude;\n\n      const apiCall = fetch(`${apiBase}lat=${lat}&lon=${long}&units=${this.state.unit}&appid=${apiKey}`)\n        .then(res => res.json())\n        .then(res => {\n          console.log(res);\n          let city = res.name;\n          let country = res.sys.country;\n          let weatherDescription = res.weather[0].main;\n          let currentTemp = res.main.temp;\n          let maxTemp = res.main.temp_max;\n          let minTemp = res.main.temp_min;\n          let icon = res.weather[0].icon;\n          let humidity = res.main.humidity; //percentage\n          let wind = res.wind.speed;\n          let clouds = res.clouds.all; //percentage\n          let sunrise = res.sys.sunrise;\n          let sunset = res.sys.sunset;\n\n          this.setState({\n            city: city,\n            country: country,\n            weatherDescription: weatherDescription,\n            currentTemp: currentTemp,\n            maxTemp: maxTemp,\n            minTemp: minTemp,\n            humidity: humidity,\n            wind: wind,\n            clouds: clouds,\n            sunrise: sunrise,\n            sunset: sunset,\n            userInputCity: city,\n            userInputCountry: country,\n            icon: `http://openweathermap.org/img/wn/${icon}@2x.png`\n          }, () => this.convertDate());\n        })\n        .catch(err => console.log(err));\n    })\n  };\n\n  render() {\n\n    if (this.state.city === undefined) {\n\n      return (\n\n          <div className=\"App\">\n\n            <SearchBar\n            geolocate={this.geolocate}\n            metricToggle={this.metricToggle}\n            getWeather={this.getWeather} \n            userInputCountry={this.state.userInputCountry}\n            userInputCity={this.state.userInputCity}\n            handleCityChange={this.handleCityChange}\n            handleCountryChange={this.handleCountryChange} />\n\n            <PreSearch />\n          \n          </div>\n          \n      )\n    }\n\n    else {\n      return (\n        <div className=\"App\">\n            \n        <SearchBar\n        geolocate={this.geolocate}\n        metricToggle={this.metricToggle}\n        getWeather={this.getWeather} \n        userInputCountry={this.state.userInputCountry}\n        userInputCity={this.state.userInputCity}\n        handleCityChange={this.handleCityChange}\n        handleCountryChange={this.handleCountryChange} />\n        \n        <div className=\"main-section\">\n        <div className=\"saved-main\">\n          {\n            this.state.displaySaved && \n    \n            <div>\n              {this.state.savedCities.map((place, index) => {\n                return <SavedWeather\n                city={this.state.city}\n                useSaved={this.useSaved}\n                removeSaved={this.removeSaved}\n                key={place.key}\n                name={place.name}\n                country={place.country} />\n              })}\n            </div>\n        \n          }\n          </div>\n\n          <div className=\"weather-main\">\n          <Weather \n          currentDate={this.currentDate}\n          city={this.state.city}\n          country={this.state.country}\n          weather={this.state.weatherDescription}\n          currentTemp={this.state.currentTemp}\n          maxTemp={this.state.maxTemp}\n          minTemp={this.state.minTemp}\n          unit={this.state.unit}\n          icon={this.state.icon}\n          displaySaved={this.displaySaved}\n          humidity={this.state.humidity}\n          wind={this.state.wind}\n          clouds={this.state.clouds}\n          sunrise={this.state.sunrise}\n          sunset={this.state.sunset} />\n          </div>  \n        </div>\n      </div>\n      );\n    } \n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}